version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2182"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2182
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - app-network

# ------------
# Rate Servers
# ------------
  rest-api-platform:
    build:
      context: ./Rest-Api-Platform
      dockerfile: Dockerfile
    container_name: Rest-API-Server
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - app-network

  tcp-platform:
    build:
      context: ./TCP-Platform
      dockerfile: Dockerfile
    container_name: TCP-Server
    restart: unless-stopped
    ports:
      - 8081:8081
    networks:
      - app-network

# --------
# Main APP
# --------
  main-platform:
    build:
      context: ./Main-Platform
      dockerfile: Dockerfile
    container_name: Main-Platform
    restart: unless-stopped
    depends_on:
      - kafka
      - tcp-platform
      - rest-api-platform
    ports:
      - 8085:8085





volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
